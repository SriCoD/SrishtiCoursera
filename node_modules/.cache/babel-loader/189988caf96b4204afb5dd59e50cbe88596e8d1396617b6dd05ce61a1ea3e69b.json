{"ast":null,"code":"// Importing React hook for managing component state\nimport{useEffect,useState}from\"react\";// Importing React icon component\nimport{MdClose}from\"react-icons/md\";import{useSelector}from\"react-redux\";// Defining a functional component ChipInput\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ChipInput(_ref){let{// Props to be passed to the component\nlabel,name,placeholder,register,errors,setValue,getValues}=_ref;const{editCourse,course}=useSelector(state=>state.course);// Setting up state for managing chips array\nconst[chips,setChips]=useState([]);useEffect(()=>{if(editCourse){// console.log(course)\nsetChips(course===null||course===void 0?void 0:course.tag);}register(name,{required:true,validate:value=>value.length>0});// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);useEffect(()=>{setValue(name,chips);// eslint-disable-next-line react-hooks/exhaustive-deps\n},[chips]);// Function to handle user input when chips are added\nconst handleKeyDown=event=>{// Check if user presses \"Enter\" or \",\"\nif(event.key===\"Enter\"||event.key===\",\"){// Prevent the default behavior of the event\nevent.preventDefault();// Get the input value and remove any leading/trailing spaces\nconst chipValue=event.target.value.trim();// Check if the input value exists and is not already in the chips array\nif(chipValue&&!chips.includes(chipValue)){// Add the chip to the array and clear the input\nconst newChips=[...chips,chipValue];setChips(newChips);event.target.value=\"\";}}};// Function to handle deletion of a chip\nconst handleDeleteChip=chipIndex=>{// Filter the chips array to remove the chip with the given index\nconst newChips=chips.filter((_,index)=>index!==chipIndex);setChips(newChips);};// Render the component\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col space-y-2\",children:[/*#__PURE__*/_jsxs(\"label\",{className:\"text-sm text-richblack-5\",htmlFor:name,children:[label,\" \",/*#__PURE__*/_jsx(\"sup\",{className:\"text-pink-200\",children:\"*\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex w-full flex-wrap gap-y-2\",children:[chips.map((chip,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"m-1 flex items-center rounded-full bg-yellow-400 px-2 py-1 text-sm text-richblack-5\",children:[chip,/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"ml-2 focus:outline-none\",onClick:()=>handleDeleteChip(index),children:/*#__PURE__*/_jsx(MdClose,{className:\"text-sm\"})})]},index)),/*#__PURE__*/_jsx(\"input\",{id:name,name:name,type:\"text\",placeholder:placeholder,onKeyDown:handleKeyDown,className:\"form-style w-full\"})]}),errors[name]&&/*#__PURE__*/_jsxs(\"span\",{className:\"ml-2 text-xs tracking-wide text-pink-200\",children:[label,\" is required\"]})]});}","map":{"version":3,"names":["useEffect","useState","MdClose","useSelector","jsx","_jsx","jsxs","_jsxs","ChipInput","_ref","label","name","placeholder","register","errors","setValue","getValues","editCourse","course","state","chips","setChips","tag","required","validate","value","length","handleKeyDown","event","key","preventDefault","chipValue","target","trim","includes","newChips","handleDeleteChip","chipIndex","filter","_","index","className","children","htmlFor","map","chip","type","onClick","id","onKeyDown"],"sources":["C:/Users/s/Desktop/StudyNotion-An-Online-Education-Platform/src/components/core/Dashboard/AddCourse/CourseInformation/ChipInput.jsx"],"sourcesContent":["// Importing React hook for managing component state\r\nimport { useEffect, useState } from \"react\"\r\n// Importing React icon component\r\nimport { MdClose } from \"react-icons/md\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\n// Defining a functional component ChipInput\r\nexport default function ChipInput({\r\n  // Props to be passed to the component\r\n  label,\r\n  name,\r\n  placeholder,\r\n  register,\r\n  errors,\r\n  setValue,\r\n  getValues,\r\n}) {\r\n  const { editCourse, course } = useSelector((state) => state.course)\r\n\r\n  // Setting up state for managing chips array\r\n  const [chips, setChips] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (editCourse) {\r\n      // console.log(course)\r\n      setChips(course?.tag)\r\n    }\r\n    register(name, { required: true, validate: (value) => value.length > 0 })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setValue(name, chips)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [chips])\r\n\r\n  // Function to handle user input when chips are added\r\n  const handleKeyDown = (event) => {\r\n    // Check if user presses \"Enter\" or \",\"\r\n    if (event.key === \"Enter\" || event.key === \",\") {\r\n      // Prevent the default behavior of the event\r\n      event.preventDefault()\r\n      // Get the input value and remove any leading/trailing spaces\r\n      const chipValue = event.target.value.trim()\r\n      // Check if the input value exists and is not already in the chips array\r\n      if (chipValue && !chips.includes(chipValue)) {\r\n        // Add the chip to the array and clear the input\r\n        const newChips = [...chips, chipValue]\r\n        setChips(newChips)\r\n        event.target.value = \"\"\r\n      }\r\n    }\r\n  }\r\n\r\n  // Function to handle deletion of a chip\r\n  const handleDeleteChip = (chipIndex) => {\r\n    // Filter the chips array to remove the chip with the given index\r\n    const newChips = chips.filter((_, index) => index !== chipIndex)\r\n    setChips(newChips)\r\n  }\r\n\r\n  // Render the component\r\n  return (\r\n    <div className=\"flex flex-col space-y-2\">\r\n      {/* Render the label for the input */}\r\n      <label className=\"text-sm text-richblack-5\" htmlFor={name}>\r\n        {label} <sup className=\"text-pink-200\">*</sup>\r\n      </label>\r\n      {/* Render the chips and input */}\r\n      <div className=\"flex w-full flex-wrap gap-y-2\">\r\n        {/* Map over the chips array and render each chip */}\r\n        {chips.map((chip, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"m-1 flex items-center rounded-full bg-yellow-400 px-2 py-1 text-sm text-richblack-5\"\r\n          >\r\n            {/* Render the chip value */}\r\n            {chip}\r\n            {/* Render the button to delete the chip */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"ml-2 focus:outline-none\"\r\n              onClick={() => handleDeleteChip(index)}\r\n            >\r\n              <MdClose className=\"text-sm\" />\r\n            </button>\r\n          </div>\r\n        ))}\r\n        {/* Render the input for adding new chips */}\r\n        <input\r\n          id={name}\r\n          name={name}\r\n          type=\"text\"\r\n          placeholder={placeholder}\r\n          onKeyDown={handleKeyDown}\r\n          className=\"form-style w-full\"\r\n        />\r\n      </div>\r\n      {/* Render an error message if the input is required and not filled */}\r\n      {errors[name] && (\r\n        <span className=\"ml-2 text-xs tracking-wide text-pink-200\">\r\n          {label} is required\r\n        </span>\r\n      )}\r\n    </div>\r\n  )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}