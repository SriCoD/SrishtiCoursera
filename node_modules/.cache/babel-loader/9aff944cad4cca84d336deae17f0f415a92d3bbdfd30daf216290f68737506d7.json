{"ast":null,"code":"export default function Grid(_ref) {\n  var swiper = _ref.swiper,\n    extendParams = _ref.extendParams;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  var slidesNumberEvenToRows;\n  var slidesPerRow;\n  var numFullColumns;\n  var getSpaceBetween = function getSpaceBetween() {\n    var spaceBetween = swiper.params.spaceBetween;\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n    return spaceBetween;\n  };\n  var initSlides = function initSlides(slidesLength) {\n    var slidesPerView = swiper.params.slidesPerView;\n    var _swiper$params$grid = swiper.params.grid,\n      rows = _swiper$params$grid.rows,\n      fill = _swiper$params$grid.fill;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n  var updateSlide = function updateSlide(i, slide, slidesLength, getDirectionLabel) {\n    var slidesPerGroup = swiper.params.slidesPerGroup;\n    var spaceBetween = getSpaceBetween();\n    var _swiper$params$grid2 = swiper.params.grid,\n      rows = _swiper$params$grid2.rows,\n      fill = _swiper$params$grid2.fill;\n    // Set slides order\n    var newSlideOrderIndex;\n    var column;\n    var row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      var groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      var slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      var columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.row = row;\n    slide.column = column;\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && \"\".concat(spaceBetween, \"px\") : '';\n  };\n  var updateWrapperSize = function updateWrapperSize(slideSize, snapGrid, getDirectionLabel) {\n    var _swiper$params = swiper.params,\n      centeredSlides = _swiper$params.centeredSlides,\n      roundLengths = _swiper$params.roundLengths;\n    var spaceBetween = getSpaceBetween();\n    var rows = swiper.params.grid.rows;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = \"\".concat(swiper.virtualSize + spaceBetween, \"px\");\n    if (centeredSlides) {\n      var newSlidesGrid = [];\n      for (var i = 0; i < snapGrid.length; i += 1) {\n        var slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push.apply(snapGrid, newSlidesGrid);\n    }\n  };\n  swiper.grid = {\n    initSlides: initSlides,\n    updateSlide: updateSlide,\n    updateWrapperSize: updateWrapperSize\n  };\n}","map":{"version":3,"names":["Grid","_ref","swiper","extendParams","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","getSpaceBetween","spaceBetween","params","indexOf","parseFloat","replace","size","initSlides","slidesLength","slidesPerView","_swiper$params$grid","Math","floor","ceil","max","updateSlide","i","slide","getDirectionLabel","slidesPerGroup","_swiper$params$grid2","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","style","order","concat","updateWrapperSize","slideSize","snapGrid","_swiper$params","centeredSlides","roundLengths","virtualSize","wrapperEl","newSlidesGrid","length","slidesGridItem","push","splice","apply"],"sources":["C:/Users/s/Desktop/StudyNotion-An-Online-Education-Platform/node_modules/swiper/modules/grid/grid.js"],"sourcesContent":["export default function Grid({\n  swiper,\n  extendParams\n}) {\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n    return spaceBetween;\n  };\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    // Set slides order\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.row = row;\n    slide.column = column;\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}