{"ast":null,"code":"import{toast}from\"react-hot-toast\";import{studentEndpoints}from\"../apis\";import{apiConnector}from\"../apiconnector\";import rzpLogo from\"../../assets/Logo/rzp_logo.png\";import{setPaymentLoading}from\"../../slices/courseSlice\";import{resetCart}from\"../../slices/cartSlice\";const{COURSE_PAYMENT_API,COURSE_VERIFY_API,SEND_PAYMENT_SUCCESS_EMAIL_API}=studentEndpoints;function loadScript(src){return new Promise(resolve=>{const script=document.createElement(\"script\");script.src=src;script.onload=()=>{resolve(true);};script.onerror=()=>{resolve(false);};document.body.appendChild(script);});}export async function buyCourse(token,courses,userDetails,navigate,dispatch){const toastId=toast.loading(\"Loading...\");try{//load the script\nconst res=await loadScript(\"https://checkout.razorpay.com/v1/checkout.js\");if(!res){toast.error(\"RazorPay SDK failed to load\");return;}//initiate the order\nconst orderResponse=await apiConnector(\"POST\",COURSE_PAYMENT_API,{courses},{Authorization:\"Bearer \".concat(token)});if(!orderResponse.data.success){throw new Error(orderResponse.data.message);}console.log(\"PRINTING orderResponse\",orderResponse);//options\nconst options={key:process.env.RAZORPAY_KEY,currency:orderResponse.data.message.currency,amount:\"\".concat(orderResponse.data.message.amount),order_id:orderResponse.data.message.id,name:\"StudyNotion\",description:\"Thank You for Purchasing the Course\",image:rzpLogo,prefill:{name:\"\".concat(userDetails.firstName),email:userDetails.email},handler:function(response){//send successful wala mail\nsendPaymentSuccessEmail(response,orderResponse.data.message.amount,token);//verifyPayment\nverifyPayment({...response,courses},token,navigate,dispatch);}};//miss hogya tha \nconst paymentObject=new window.Razorpay(options);paymentObject.open();paymentObject.on(\"payment.failed\",function(response){toast.error(\"oops, payment failed\");console.log(response.error);});}catch(error){console.log(\"PAYMENT API ERROR.....\",error);toast.error(\"Could not make Payment\");}toast.dismiss(toastId);}async function sendPaymentSuccessEmail(response,amount,token){try{await apiConnector(\"POST\",SEND_PAYMENT_SUCCESS_EMAIL_API,{orderId:response.razorpay_order_id,paymentId:response.razorpay_payment_id,amount},{Authorization:\"Bearer \".concat(token)});}catch(error){console.log(\"PAYMENT SUCCESS EMAIL ERROR....\",error);}}//verify payment\nasync function verifyPayment(bodyData,token,navigate,dispatch){const toastId=toast.loading(\"Verifying Payment....\");dispatch(setPaymentLoading(true));try{const response=await apiConnector(\"POST\",COURSE_VERIFY_API,bodyData,{Authorization:\"Bearer \".concat(token)});if(!response.data.success){throw new Error(response.data.message);}toast.success(\"payment Successful, ypou are addded to the course\");navigate(\"/dashboard/enrolled-courses\");dispatch(resetCart());}catch(error){console.log(\"PAYMENT VERIFY ERROR....\",error);toast.error(\"Could not verify Payment\");}toast.dismiss(toastId);dispatch(setPaymentLoading(false));}","map":{"version":3,"names":["toast","studentEndpoints","apiConnector","rzpLogo","setPaymentLoading","resetCart","COURSE_PAYMENT_API","COURSE_VERIFY_API","SEND_PAYMENT_SUCCESS_EMAIL_API","loadScript","src","Promise","resolve","script","document","createElement","onload","onerror","body","appendChild","buyCourse","token","courses","userDetails","navigate","dispatch","toastId","loading","res","error","orderResponse","Authorization","concat","data","success","Error","message","console","log","options","key","process","env","RAZORPAY_KEY","currency","amount","order_id","id","name","description","image","prefill","firstName","email","handler","response","sendPaymentSuccessEmail","verifyPayment","paymentObject","window","Razorpay","open","on","dismiss","orderId","razorpay_order_id","paymentId","razorpay_payment_id","bodyData"],"sources":["C:/Users/s/Desktop/StudyNotion-An-Online-Education-Platform/src/services/operations/studentFeaturesAPI.js"],"sourcesContent":["import { toast } from \"react-hot-toast\";\r\nimport { studentEndpoints } from \"../apis\";\r\nimport { apiConnector } from \"../apiconnector\";\r\nimport rzpLogo from \"../../assets/Logo/rzp_logo.png\"\r\nimport { setPaymentLoading } from \"../../slices/courseSlice\";\r\nimport { resetCart } from \"../../slices/cartSlice\";\r\n\r\n\r\nconst {COURSE_PAYMENT_API, COURSE_VERIFY_API, SEND_PAYMENT_SUCCESS_EMAIL_API} = studentEndpoints;\r\n\r\nfunction loadScript(src) {\r\n    return new Promise((resolve) => {\r\n        const script = document.createElement(\"script\");\r\n        script.src = src;\r\n\r\n        script.onload = () => {\r\n            resolve(true);\r\n        }\r\n        script.onerror= () =>{\r\n            resolve(false);\r\n        }\r\n        document.body.appendChild(script);\r\n    })\r\n}\r\n\r\n\r\nexport async function buyCourse(token, courses, userDetails, navigate, dispatch) {\r\n    const toastId = toast.loading(\"Loading...\");\r\n    try{\r\n        //load the script\r\n        const res = await loadScript(\"https://checkout.razorpay.com/v1/checkout.js\");\r\n\r\n        if(!res) {\r\n            toast.error(\"RazorPay SDK failed to load\");\r\n            return;\r\n        }\r\n\r\n        //initiate the order\r\n        const orderResponse = await apiConnector(\"POST\", COURSE_PAYMENT_API, \r\n                                {courses},\r\n                                {\r\n                                    Authorization: `Bearer ${token}`,\r\n                                })\r\n\r\n        if(!orderResponse.data.success) {\r\n            throw new Error(orderResponse.data.message);\r\n        }\r\n        console.log(\"PRINTING orderResponse\", orderResponse);\r\n        //options\r\n        const options = {\r\n            key: process.env.RAZORPAY_KEY,\r\n            currency: orderResponse.data.message.currency,\r\n            amount: `${orderResponse.data.message.amount}`,\r\n            order_id:orderResponse.data.message.id,\r\n            name:\"StudyNotion\",\r\n            description: \"Thank You for Purchasing the Course\",\r\n            image:rzpLogo,\r\n            prefill: {\r\n                name:`${userDetails.firstName}`,\r\n                email:userDetails.email\r\n            },\r\n            handler: function(response) {\r\n                //send successful wala mail\r\n                sendPaymentSuccessEmail(response, orderResponse.data.message.amount,token );\r\n                //verifyPayment\r\n                verifyPayment({...response, courses}, token, navigate, dispatch);\r\n            }\r\n        }\r\n        //miss hogya tha \r\n        const paymentObject = new window.Razorpay(options);\r\n        paymentObject.open();\r\n        paymentObject.on(\"payment.failed\", function(response) {\r\n            toast.error(\"oops, payment failed\");\r\n            console.log(response.error);\r\n        })\r\n\r\n    }\r\n    catch(error) {\r\n        console.log(\"PAYMENT API ERROR.....\", error);\r\n        toast.error(\"Could not make Payment\");\r\n    }\r\n    toast.dismiss(toastId);\r\n}\r\n\r\nasync function sendPaymentSuccessEmail(response, amount, token) {\r\n    try{\r\n        await apiConnector(\"POST\", SEND_PAYMENT_SUCCESS_EMAIL_API, {\r\n            orderId: response.razorpay_order_id,\r\n            paymentId: response.razorpay_payment_id,\r\n            amount,\r\n        },{\r\n            Authorization: `Bearer ${token}`\r\n        })\r\n    }\r\n    catch(error) {\r\n        console.log(\"PAYMENT SUCCESS EMAIL ERROR....\", error);\r\n    }\r\n}\r\n\r\n//verify payment\r\nasync function verifyPayment(bodyData, token, navigate, dispatch) {\r\n    const toastId = toast.loading(\"Verifying Payment....\");\r\n    dispatch(setPaymentLoading(true));\r\n    try{\r\n        const response  = await apiConnector(\"POST\", COURSE_VERIFY_API, bodyData, {\r\n            Authorization:`Bearer ${token}`,\r\n        })\r\n\r\n        if(!response.data.success) {\r\n            throw new Error(response.data.message);\r\n        }\r\n        toast.success(\"payment Successful, ypou are addded to the course\");\r\n        navigate(\"/dashboard/enrolled-courses\");\r\n        dispatch(resetCart());\r\n    }   \r\n    catch(error) {\r\n        console.log(\"PAYMENT VERIFY ERROR....\", error);\r\n        toast.error(\"Could not verify Payment\");\r\n    }\r\n    toast.dismiss(toastId);\r\n    dispatch(setPaymentLoading(false));\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}